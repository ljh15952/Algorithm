재귀란?
어떤 문제를 해결하기 위해 
알고리즘을 설계할 때 동인한 문제의 조금 더 작은 경우를
해결함으로써 그 문제를 해결하는 것! 분할?
문제가 간단해져서 바로 풀 수 있는 문제로 작아질 때까지->이거는 조금?

n장의 티셔츠 중에서 k개의 티셔츠를 고르는 경우의 수
n! / (k! *(n-k)!) -> 어려운데?
0!의 값은 1보다 크거나 같고 0보다 작거나 같은 모든 정수들의 곱
1 <= x <= 0 -> 없잔아 0! = 1
n개 옷 중에서 n개를 고르려면? 1가지!
1! / (1! * (1-1)!) -> 1 / (1 * 0!) -> 1

n! ->  n = 0 일 때는 1
n이 양수일 때는 1 * 2 * ... (n-1)*n

n! = n * (n - 1) ... 2 * 1
(n - 1)! = (n - 1) ... 2 * 1
n! = n * (n-1)!
-> (n-1)!을 계산한 후 그 결과를 n과 곱하여 n!를 계산할 수 있다.!!
-> 하위문제

5! = 5 * 4! = 120
4! = 4 * 3! = 24
3! = 3 * 2! = 6
2! = 2 * 1! = 2
1! = 1 * 0! = 1

탈출 조건(base case) 즉석에서 답을 구할 수 있는 첫번째 조건
n = 0이면 n! = 1
다른 값에 대한 함수를 계산하는 케이스 재귀조건(resursive case)
n은 양수여야 함
(n-1)!를 계산하는 하위 문제를 해결하여
그 결과값과 n을 곱한다 그리고 n!을 이 곱의 결과값으로 선언

재귀 알고리즘의 속성
1. 재귀의 호출은 같은 문제 내에서 더 범위가 작은 값
	즉 하위 문제에 대해 이루어 져야한다.
2. 재귀함수 호출은 더 이상 반복되지 않은 base case에 도달해야 한다.
