그래프(graph)
변(edge)
정점(vectex)
(u,v)
양방향 관계, 방향성이 없다.(undirected)->(u,v)=(v,u)
->반대 방향 그래프(directed graphs)
정점을 연결하는 변의 수는 정점의 차수(degree)

가중치(weight)
가중치가 있는 변이 있는 그래프 -> 가중 그래프(weight graph)
가중 그래프에서 최단경로를 알고 싶으면 두 정점 간의 모든 경로에서
변의 가중치 합이 최소가 되는 경로를 찾는다.

방향성 비순환 그래프(directed acyclic graph) -> dag

정점 집합 V, 변 집합 E로 묶어서 집합으로 생각하는 것이 좋음

그래프를 입력값으로 어떤 상황이나 알고리즘을 실행하고자 할 때는 상황에 따라
그래프를 다르게 나타낸다. 3가지 방법

1. 그래프를 나타낼 때 차지하는 메모리나 공간
2. 주어진 변이 그래프 안에 있는지 결정하는데 걸리는 시간
3. 주어진 정점의 이웃을 알아내는데 걸리는 시간

연결선 리스트(Edge Lists)
변 E개로 이루어진 리스트나 배열로 나타내는 것
변을 나타내기 위해서 두 정점 번호의 배열이나
변으로 연결된 정점의 정점 숫자가 포함된 객체의 배열을 만든다.
변에 가중치가 있다면 3번 째 요소를 배열에 추가하거나
더 많은 정보를 객체에 추가하여 변에 가중치를 더한다.
그래프에 특정 변이 있는지 알고 싶으면 리스트를 모두 검색해야 한다.(선형검색)
O(lgE)시간 내에 찾는 법이 있는데 약간 복잡함
[ [0,1], [0,6], [0,8], [1,4], [1,6], [1,9], [2,4], [2,6], [3,4], [3,5],  
[3,8], [4,5], [4,9], [7,8], [7,9] ]


인접 행렬
  0 1 2 3 4 5 6
0 0 1 0 0 0 0 0
1 1 0 0 0 0 0 0
2 0 0 0 0 0 0 0
3 0 0 0 0 0 0 0
4 0 0 0 0 0 0 0
5 0 0 0 0 0 0 0 
6 0 0 0 0 0 0 0
어떤 변의 존재 여부를 일정 시간 내에 파악할 수 있다.
공간을 V제곱 만큼 차지함
어떤 정점이 주어진 정점 i와 인접해 있는지 알기 위해
i정점과 인접한 정점들의 수가 적을 때도 i행의 모든 V항목을 찾아봐야 함
비방향 그래프에서 대칭이다.
방향 그래프에서 인접 행렬은 대칭일 필요는 없다.

인접 리스트
[ 0 -> [1, 6, 8],
  1 -> [0, 4, 6, 9],
  2 -> [4, 6],
  3 ->[4, 5, 8],
  4 -> [1, 2, 3, 5, 9],
  5 -> [3, 4],
  6 -> [0, 1, 2],
  7 -> [8, 9],
  8 -> [0, 3, 7],
  9 -> [1, 4, 7] ]
  

var edgeList = [ [0, 2], [1, 3], [2, 3], [2, 4], [3, 5], [4, 5] ];

var adjMatrix = [
    [0,0,1,0,0,0],
    [0,0,0,1,0,0],
    [0,0,0,1,1,0],
    [0,0,0,0,0,1],
    [0,0,0,0,0,1],
    [0,0,0,0,0,0],
    ];

var adjList = [
    [2],
    [3],
    [3,4],
    [5],
    [5],
    [],
    ];
